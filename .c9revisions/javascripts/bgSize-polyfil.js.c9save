{"ts":1353935563066,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"console.log('This would be the main JS file.');\n"]],"start1":0,"start2":0,"length1":0,"length2":48}]],"length":48}
{"contributors":[],"silentsave":false,"ts":1353935537346,"patch":[[{"diffs":[[-1,"console.log('This would be the main JS file.');\n"],[1,"bgSize-polyfil.js"]],"start1":0,"start2":0,"length1":48,"length2":17}]],"length":17,"saved":false}
{"ts":1353935543587,"patch":[[{"diffs":[[-1,"bgSize-polyfil.js"],[1,"/*\n * background-size polyfil\n * author: Omar '@0m4r' Adobati\n * source at: https://github.com/0m4r/bgSize-polyfil\n *\n * inspired by: https://gist.github.com/3081898\n * */\n!function($) {\n\n    \"use strict\"; // jshint ;_;\n\n    var methods = {\n        init: function(opt) {\n\n            if (opt) {\n                if (!opt.force && \"backgroundSize\" in document.body.style) {\n                    return;\n                }\n\n                var options = opt;\n                var newImg = new Image();\n                options.img = newImg;\n                options.$that = $(this);\n                newImg.onload = function() {\n                    methods.doit.call(this, options);\n                };\n                newImg.src = options.backgroundImage;\n            }\n            else {\n                $.error('Invalid arguments number: ', arguments);\n            }\n        },\n\n        doit: function(opt) {\n            var $that = opt.$that;\n            var options = opt;\n\n            var w, h = 'auto';\n            options.$img = createBgImage(options.backgroundImage);\n            options.container_w = $that.width(),\n            options.container_h = $that.height(),\n            options.img_w = (options.img).width,\n            options.img_h = (options.img).height,\n            options.container_ratio = $that.width() / $that.height();\n\n            if (options.backgroundSize) {\n                var bSize = options.backgroundSize;\n                console.log('bSize', bSize);\n                switch (bSize) {\n                case 'auto':\n                    break;\n                case 'cover':\n                    /*\n                     * ‘cover’\n                     * Scale the image, while preserving its intrinsic aspect ratio (if any),\n                     * to the smallest size such $that both its width and its height can completely\n                     * cover the background positioning area.\n                     */\n                    (function() {\n                        console.log('** cover **');\n                        methods.applyCover.call(this, options);\n                    })();\n                    break;\n                case 'contain':\n                    /*\n                     * ‘contain’\n                     * Scale the image, while preserving its intrinsic aspect ratio (if any),\n                     * to the largest size such $that both its width and its height can fit inside\n                     * the background positioning area.\n                     */\n                    (function() {\n                        console.log('** contain **');\n                        methods.applyContain.call(this, options);\n                    })();\n\n                    break;\n                default:\n                    (function() {\n                        var tmp = bSize.split(' ');\n                        console.log(tmp);\n                        if (tmp.length == 1) {\n                            w = tmp[0];\n                        }\n                        else {\n                            w = tmp[0];\n                            h = tmp[1];\n                        }\n                    })();\n                }\n            }\n            else {\n                $.error('Invalid options: no \"options.backgroundSize\" property specified', options);\n            }\n        },\n\n        cover: function(options) {\n            if (options) options.backgroundSize = 'cover';\n            methods.init.call(this, options);\n\n        },\n\n        applyCover: function(options) {\n            var w, h = 'auto';\n            var $that = options.$that;\n            var container_ratio = options.container_ratio || '1',\n                container_w = options.container_w,\n                container_h = options.container_h,\n                $img = options.$img,\n                img_w = options.img_w,\n                img_h = options.img_h;\n\n            if (container_ratio > 1) {\n                if (img_w / container_w > img_h / container_h) {\n                    h = container_h;\n                    w = img_w / img_h * h;\n                }\n                else {\n                    w = container_w;\n                    h = img_h / img_w * w;\n                }\n            }\n            else {\n                w = 'auto';\n                h = '100%';\n            }\n\n            $img = restyleBgImage($img, w, h);\n            $that = restyleContainer($that, options);\n            var $bg_container = createBgContainer(options);\n\n            $that.wrap($bg_container);\n            $img.insertBefore($that);\n        },\n\n        contain: function(options) {\n            options.backgroundSize = 'contain';\n            methods.init.call(this, options);\n\n        },\n\n        applyContain: function(options) {\n            var w, h = 'auto';\n            var $that = options.$that;\n            var container_w = options.container_w,\n                container_h = options.container_h,\n                $img = options.$img,\n                img_w = options.img_w,\n                img_h = options.img_h;\n\n            var bgRepeat = $that.css('background-repeat');\n\n            if (options.container_ratio > 1) {\n                if (img_w / options.container_w > img_h / container_h) {\n                    w = container_w;\n                    h = img_h / img_w * w;\n                }\n                else {\n                    h = container_h;\n                    w = img_w / img_h * h;\n                }\n            }\n            else {\n                var ratio = img_h / img_w;\n                w = container_w;\n                h = ratio * w;\n            }\n\n            $img = restyleBgImage($img, w, h);\n            $that = restyleContainer($that, options);\n            var $bg_container = createBgContainer(options);\n\n            switch (bgRepeat) {\n            case 'repeat-y':\n                $that.wrap($bg_container);\n                repeatY($img, container_h / h, $that);\n                break;\n            case 'repeat-x':\n                $that.wrap($bg_container);\n                repeatX($img, container_w / w, $that);\n                break;\n            case 'no-repeat':\n                $that.wrap($bg_container);\n                $img.insertBefore($that);\n                break;\n            default:\n                $that.wrap($bg_container);\n                repeatX($img, container_w / w, $that);\n                repeatY($img, container_h / h, $that);\n            }\n        }\n    };\n\n    $.fn.bgSize = function(method) {\n        // Method calling logic\n        if (arguments.length > 0) {;\n            if (methods[method]) {\n                return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\n            }\n            else if (typeof method === 'object' || !method) {\n                return methods.init.apply(this, arguments);\n            }\n            else {\n                $.error('Method ' + method + ' does not exist on jQuery.bgSize');\n            }\n        }\n        else {\n            $.error('Invalid arguments number: ', arguments);\n        }\n\n    };\n\n    var restyleContainer = function($el, options) {\n        return $el.css({\n            'position': 'relative',\n            'top': 0,\n            'left': 0,\n            'height': options.container_h,\n            'width': options.container_w,\n        });\n    };\n\n    var restyleBgImage = function($el, w, h) {\n        return $el.css({\n            'width': w,\n            'height': h\n        });\n    };\n\n    var createBgImage = function(bgImgSrc) {\n        return $('<img />').attr('src', bgImgSrc).css({\n            'position': 'absolute',\n            'top': '0',\n            'left': '0',\n            'background': 'none',\n            'border': 'none',\n            'z-index': '-10'\n        });\n    };\n\n    var createBgContainer = function(options) {\n        return $('<div/>').css({\n            'position': 'relative',\n            'overflow': 'hidden',\n            'height': options.container_h,\n            'width': options.container_w,\n            'background': 'none',\n            'padding': 0,\n            'margin': 0,\n            'outline': 0,\n        });\n    };\n\n    var repeatY = function($bgImg, copies, $parent) {\n        var repeat = copies;\n        var $img = $bgImg;\n        var $prnt = $parent;\n        for (var j = 0; j < repeat; j++) {\n            var top = parseInt($img.height(), 0);\n            var $img_clone = $img.clone();\n            $img_clone.css({\n                'top': (top * j) + 'px'\n            }).insertBefore($prnt);\n        }\n    };\n\n    var repeatX = function($bgImg, copies, $parent) {\n        var repeat = copies;\n        var $img = $bgImg;\n        var $prnt = $parent;\n        for (var j = 0; j < repeat; j++) {\n            var top = parseInt($img.width(), 0);\n            var $img_clone = $img.clone();\n            $img_clone.css({\n                'left': (top * j) + 'px'\n            }).insertBefore($prnt);\n        }\n    };\n\n}(window.jQuery);"]],"start1":0,"start2":0,"length1":17,"length2":8886}]],"length":8886,"saved":false}
